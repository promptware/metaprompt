# Generated from MetaPrompt.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,176,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,3,
        4,56,8,4,1,4,5,4,59,8,4,10,4,12,4,62,9,4,1,4,1,4,1,5,1,5,1,6,1,6,
        3,6,70,8,6,1,7,1,7,1,7,1,8,1,8,3,8,77,8,8,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,10,4,10,87,8,10,11,10,12,10,88,1,10,4,10,92,8,10,11,
        10,12,10,93,1,10,5,10,97,8,10,10,10,12,10,100,9,10,1,11,1,11,1,11,
        5,11,105,8,11,10,11,12,11,108,9,11,1,11,5,11,111,8,11,10,11,12,11,
        114,9,11,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,5,21,172,8,21,10,21,12,21,175,9,21,
        0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,0,17,0,19,0,21,8,23,9,25,
        0,27,10,29,11,31,12,33,13,35,14,37,15,39,16,41,17,43,18,1,0,4,3,
        0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,45,57,65,90,
        95,95,97,122,2,0,10,10,32,32,181,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,1,45,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,0,7,51,1,0,0,0,9,55,1,0,0,
        0,11,65,1,0,0,0,13,69,1,0,0,0,15,71,1,0,0,0,17,76,1,0,0,0,19,78,
        1,0,0,0,21,80,1,0,0,0,23,101,1,0,0,0,25,115,1,0,0,0,27,117,1,0,0,
        0,29,121,1,0,0,0,31,129,1,0,0,0,33,137,1,0,0,0,35,143,1,0,0,0,37,
        152,1,0,0,0,39,156,1,0,0,0,41,162,1,0,0,0,43,168,1,0,0,0,45,46,5,
        91,0,0,46,2,1,0,0,0,47,48,5,93,0,0,48,4,1,0,0,0,49,50,5,61,0,0,50,
        6,1,0,0,0,51,52,5,63,0,0,52,53,5,61,0,0,53,8,1,0,0,0,54,56,7,0,0,
        0,55,54,1,0,0,0,55,56,1,0,0,0,56,60,1,0,0,0,57,59,7,1,0,0,58,57,
        1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,
        62,60,1,0,0,0,63,64,5,36,0,0,64,10,1,0,0,0,65,66,5,35,0,0,66,12,
        1,0,0,0,67,70,3,15,7,0,68,70,9,0,0,0,69,67,1,0,0,0,69,68,1,0,0,0,
        70,14,1,0,0,0,71,72,3,19,9,0,72,73,3,17,8,0,73,16,1,0,0,0,74,77,
        3,1,0,0,75,77,3,19,9,0,76,74,1,0,0,0,76,75,1,0,0,0,77,18,1,0,0,0,
        78,79,5,92,0,0,79,20,1,0,0,0,80,81,5,58,0,0,81,82,5,117,0,0,82,83,
        5,115,0,0,83,84,5,101,0,0,84,86,1,0,0,0,85,87,3,25,12,0,86,85,1,
        0,0,0,87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,
        92,7,2,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,
        0,94,98,1,0,0,0,95,97,3,25,12,0,96,95,1,0,0,0,97,100,1,0,0,0,98,
        96,1,0,0,0,98,99,1,0,0,0,99,22,1,0,0,0,100,98,1,0,0,0,101,102,5,
        64,0,0,102,106,7,0,0,0,103,105,7,1,0,0,104,103,1,0,0,0,105,108,1,
        0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,112,1,0,0,0,108,106,1,
        0,0,0,109,111,3,25,12,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,
        1,0,0,0,112,113,1,0,0,0,113,24,1,0,0,0,114,112,1,0,0,0,115,116,7,
        3,0,0,116,26,1,0,0,0,117,118,5,58,0,0,118,119,5,105,0,0,119,120,
        5,102,0,0,120,28,1,0,0,0,121,122,5,58,0,0,122,123,5,99,0,0,123,124,
        5,104,0,0,124,125,5,111,0,0,125,126,5,111,0,0,126,127,5,115,0,0,
        127,128,5,101,0,0,128,30,1,0,0,0,129,130,5,58,0,0,130,131,5,111,
        0,0,131,132,5,112,0,0,132,133,5,116,0,0,133,134,5,105,0,0,134,135,
        5,111,0,0,135,136,5,110,0,0,136,32,1,0,0,0,137,138,5,58,0,0,138,
        139,5,119,0,0,139,140,5,105,0,0,140,141,5,116,0,0,141,142,5,104,
        0,0,142,34,1,0,0,0,143,144,5,58,0,0,144,145,5,100,0,0,145,146,5,
        101,0,0,146,147,5,102,0,0,147,148,5,97,0,0,148,149,5,117,0,0,149,
        150,5,108,0,0,150,151,5,116,0,0,151,36,1,0,0,0,152,153,5,58,0,0,
        153,154,5,105,0,0,154,155,5,115,0,0,155,38,1,0,0,0,156,157,5,58,
        0,0,157,158,5,116,0,0,158,159,5,104,0,0,159,160,5,101,0,0,160,161,
        5,110,0,0,161,40,1,0,0,0,162,163,5,58,0,0,163,164,5,101,0,0,164,
        165,5,108,0,0,165,166,5,115,0,0,166,167,5,101,0,0,167,42,1,0,0,0,
        168,169,5,58,0,0,169,173,7,0,0,0,170,172,7,1,0,0,171,170,1,0,0,0,
        172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,44,1,0,0,0,175,
        173,1,0,0,0,11,0,55,60,69,76,88,93,98,106,112,173,0
    ]

class MetaPromptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LB = 1
    RB = 2
    EQ_KW = 3
    EQ_OPTIONAL_KW = 4
    META_PROMPT = 5
    COMMENT_KW = 6
    CHAR = 7
    USE = 8
    CALL = 9
    IF_KW = 10
    CHOOSE_KW = 11
    OPTION_KW = 12
    WITH_KW = 13
    DEFAULT_KW = 14
    IS_KW = 15
    THEN_KW = 16
    ELSE_KW = 17
    VAR_NAME = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "'='", "'?='", "'#'", "':if'", "':choose'", "':option'", 
            "':with'", "':default'", "':is'", "':then'", "':else'" ]

    symbolicNames = [ "<INVALID>",
            "LB", "RB", "EQ_KW", "EQ_OPTIONAL_KW", "META_PROMPT", "COMMENT_KW", 
            "CHAR", "USE", "CALL", "IF_KW", "CHOOSE_KW", "OPTION_KW", "WITH_KW", 
            "DEFAULT_KW", "IS_KW", "THEN_KW", "ELSE_KW", "VAR_NAME" ]

    ruleNames = [ "LB", "RB", "EQ_KW", "EQ_OPTIONAL_KW", "META_PROMPT", 
                  "COMMENT_KW", "CHAR", "ESCAPED", "ESCAPEE", "ESCAPE", 
                  "USE", "CALL", "WS", "IF_KW", "CHOOSE_KW", "OPTION_KW", 
                  "WITH_KW", "DEFAULT_KW", "IS_KW", "THEN_KW", "ELSE_KW", 
                  "VAR_NAME" ]

    grammarFileName = "MetaPrompt.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


