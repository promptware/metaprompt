//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\legov\OneDrive\Documents\GitHub\metaprompt\grammar\MetaPrompt.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class MetaPromptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LB=1, RB=2, EQ_KW=3, META_KW=4, CHAR=5, USE=6, IF_KW=7, THEN_KW=8, ELSE_KW=9, 
		VAR_NAME=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LB", "RB", "EQ_KW", "META_KW", "CHAR", "USE", "WS", "IF_KW", "THEN_KW", 
		"ELSE_KW", "VAR_NAME"
	};


	public MetaPromptLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MetaPromptLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'='", "'$'", null, null, "':if'", "':then'", "':else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LB", "RB", "EQ_KW", "META_KW", "CHAR", "USE", "IF_KW", "THEN_KW", 
		"ELSE_KW", "VAR_NAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaPrompt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MetaPromptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', 'R', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', '*', '\n', '\a', '\r', '\a', 
		'\xE', '\a', '+', '\x3', '\a', '\x6', '\a', '/', '\n', '\a', '\r', '\a', 
		'\xE', '\a', '\x30', '\x3', '\a', '\a', '\a', '\x34', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x37', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', 'N', '\n', '\f', '\f', '\f', '\xE', 
		'\f', 'Q', '\v', '\f', '\x2', '\x2', '\r', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\x2', '\x11', 
		'\t', '\x13', '\n', '\x15', '\v', '\x17', '\f', '\x3', '\x2', '\x6', '\x6', 
		'\x2', '/', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x4', '\x2', 
		'\f', '\f', '\"', '\"', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', 
		'\x2', '\x32', ';', '\x43', '\\', '\x63', '|', '\x2', 'T', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x3', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\a', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\v', '!', '\x3', '\x2', '\x2', '\x2', '\r', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x38', '\x3', '\x2', '\x2', '\x2', '\x11', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '>', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x17', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1A', '\a', ']', '\x2', '\x2', '\x1A', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '_', '\x2', '\x2', '\x1C', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '?', '\x2', '\x2', 
		'\x1E', '\b', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '&', '\x2', 
		'\x2', ' ', '\n', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\v', '\x2', 
		'\x2', '\x2', '\"', '\f', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', 
		'<', '\x2', '\x2', '$', '%', '\a', 'w', '\x2', '\x2', '%', '&', '\a', 
		'u', '\x2', '\x2', '&', '\'', '\a', 'g', '\x2', '\x2', '\'', ')', '\x3', 
		'\x2', '\x2', '\x2', '(', '*', '\x5', '\xF', '\b', '\x2', ')', '(', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x3', 
		'\x2', '\x2', '\x2', '-', '/', '\t', '\x2', '\x2', '\x2', '.', '-', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x35', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x5', 
		'\xF', '\b', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\t', '\x3', '\x2', '\x2', '\x39', '\x10', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\a', '<', '\x2', '\x2', ';', '<', '\a', 'k', '\x2', 
		'\x2', '<', '=', '\a', 'h', '\x2', '\x2', '=', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\a', '<', '\x2', '\x2', '?', '@', '\a', 'v', '\x2', 
		'\x2', '@', '\x41', '\a', 'j', '\x2', '\x2', '\x41', '\x42', '\a', 'g', 
		'\x2', '\x2', '\x42', '\x43', '\a', 'p', '\x2', '\x2', '\x43', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '<', '\x2', '\x2', '\x45', 
		'\x46', '\a', 'g', '\x2', '\x2', '\x46', 'G', '\a', 'n', '\x2', '\x2', 
		'G', 'H', '\a', 'u', '\x2', '\x2', 'H', 'I', '\a', 'g', '\x2', '\x2', 
		'I', '\x16', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '<', '\x2', '\x2', 
		'K', 'O', '\t', '\x4', '\x2', '\x2', 'L', 'N', '\t', '\x5', '\x2', '\x2', 
		'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x18', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x2', '+', '\x30', '\x35', 'O', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
